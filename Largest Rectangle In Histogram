class Solution {
public:
vector<int> Left(vector<int> a,int n)
{
	vector<int> left;
	stack<pair<int,int>> s;
	int psudoIndex=-1;

	for(int i=0;i<n;i++)
	{
		if(s.size()==0)
		{
			left.push_back(psudoIndex);
		}
		else if(s.size()>0 && s.top().first<a[i])
		{
			left.push_back(s.top().second);
		}
		else if(s.size()>0 && s.top().first>=a[i])
		{
			while(s.size()>0 && s.top().first>=a[i])
			{
				s.pop();
			}
			if(s.size()==0)
			{
				left.push_back(psudoIndex);
			}
			else
			{
				left.push_back(s.top().second);
			}
		}
		s.push({a[i],i});
	}
	return left;
}
vector<int> Right(vector<int>a,int n)
{
	vector<int> right;
	stack<pair<int,int>> s;
	long long int psudoIndex=n;

	for(int i=n-1;i>=0;i--)
	{
		if(s.size()==0)
		{
			right.push_back(psudoIndex);
		}
		else if(s.size()>0 && s.top().first<a[i])
		{
			right.push_back(s.top().second);
		}
		else if(s.size()>0 && s.top().first>=a[i])
		{
			while(s.size()>0 && s.top().first>=a[i])
			{
				s.pop();
			}
			if(s.size()==0)
			{
				right.push_back(psudoIndex);
			}
			else
			{
				right.push_back(s.top().second);
			}
		}
		s.push({a[i],i});
	}
	reverse(right.begin(),right.end());
	return right;
}

    int largestRectangleArea(vector<int>& a) {
    int n=a.size();
        if(n==0)
        {
            return 0;
        }
    vector<int> l,r,w,area;
	l=Left(a,n);
	r=Right(a,n);
	for(int i=0;i<n;i++)
	{
		w.push_back(r[i]-l[i]-1);
	}
	for(int i=0;i<n;i++)
	{
		area.push_back(a[i]*w[i]);
	}
	return *max_element(area.begin(),area.end());
    }
};